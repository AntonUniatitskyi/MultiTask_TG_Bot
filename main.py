import asyncio
import logging
import aiohttp
import sqlite3
import requests
import json
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from decouple import config

# --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –¢–û–ö–ï–ù–´ ---
TOKEN = config('TOKEN')
WEATHER_TOKEN = config('WEATHER_TOKEN')
GITHUB_TOKEN = config('GITHUB_TOKEN')
ALARM_API_TOKEN = config('ALARM_API_TOKEN')

bot = Bot(token=TOKEN)
dp = Dispatcher()

DB_PATH = 'plans.db'

# --- –ë–î ---
def create_db():
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS plans (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                plan TEXT NOT NULL
            )
        ''')
        conn.commit()
        logger.info("–¢–∞–±–ª–∏—Ü–∞ 'plans' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def greate_db_user():
    conn = sqlite3.connect("bot_data.db")
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        region_id TEXT,
        reg_id INTEGER
    )
    """)
    conn.commit()

def get_db_connection():
    conn = sqlite3.connect('bot_data.db')  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    return conn

def save_plan(user_id, plan_text):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS plans (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                plan TEXT NOT NULL
            )
        ''')
        cursor.execute('INSERT INTO plans (user_id, plan) VALUES (?, ?)', (user_id, plan_text))
        conn.commit()

# --- –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ---
def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÖ –ü–ª–∞–Ω—ã")],
            [KeyboardButton(text="üå¶ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã")],
            [KeyboardButton(text="üêô GitHub –ö–æ–º–º–∏—Ç—ã")],
            [KeyboardButton(text="üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–µ–≤–æ–≥–∞—Ö")]
        ],
        resize_keyboard=True
    )

# --- –•–ï–ê–î–ï–† ---
token = config('ALARM_API_TOKEN')
header = {
    'Authorization': f'{token}',
    'Content-Type': 'application/json'
}

url = 'https://api.ukrainealarm.com/api/v3/regions'
url_alert = 'https://api.ukrainealarm.com/api/v3/alerts'

# --- –°–û–°–¢–û–Ø–ù–ò–Ø ---
class WeatherState(StatesGroup):
    waiting_for_city = State()

class RegionState(StatesGroup):
    waiting_for_obl = State()
    waiting_for_regi = State()
    waiting_for_city = State()

class PlanState(StatesGroup):
    waiting_for_plan = State()
    waiting_for_plan_edit = State()
    waiting_for_new_plan = State()
    waiting_for_plan_delete = State()

class GitHubState(StatesGroup):
    waiting_for_owner = State()
    waiting_for_repo = State()

# --- –ü–û–ì–û–î–ù–´–ï –£–°–õ–û–í–ò–Ø ---
WEATHER_CONDITIONS = {
    "Sunny": "–°–æ–ª–Ω–µ—á–Ω–æ",
    "Clear": "–Ø—Å–Ω–æ",
    "Partly cloudy": "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
    "Cloudy": "–û–±–ª–∞—á–Ω–æ",
    "Overcast": "–ü–∞—Å–º—É—Ä–Ω–æ",
    "Mist": "–¢—É–º–∞–Ω",
    "Patchy rain possible": "–í–æ–∑–º–æ–∂–µ–Ω –Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å",
    "Patchy snow possible": "–í–æ–∑–º–æ–∂–µ–Ω –Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥",
    "Patchy sleet possible": "–í–æ–∑–º–æ–∂–µ–Ω –Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º",
    "Patchy freezing drizzle possible": "–í–æ–∑–º–æ–∂–µ–Ω –Ω–µ–±–æ–ª—å—à–æ–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å",
    "Thundery outbreaks possible": "–í–æ–∑–º–æ–∂–Ω—ã –≥—Ä–æ–∑—ã",
    "Blowing snow": "–ú–µ—Ç–µ–ª—å",
    "Blizzard": "–°–∏–ª—å–Ω–∞—è –º–µ—Ç–µ–ª—å",
    "Fog": "–ì—É—Å—Ç–æ–π —Ç—É–º–∞–Ω",
    "Freezing fog": "–õ–µ–¥—è–Ω–æ–π —Ç—É–º–∞–Ω",
    "Light drizzle": "–õ—ë–≥–∫–∞—è –º–æ—Ä–æ—Å—å",
    "Heavy rain": "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
    "Light rain": "–õ—ë–≥–∫–∏–π –¥–æ–∂–¥—å",
    "Moderate rain": "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å",
    "Heavy snow": "–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥",
    "Light snow": "–õ—ë–≥–∫–∏–π —Å–Ω–µ–≥",
    "Moderate snow": "–£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥",
    "Light rain shower": "–õ—ë–≥–∫–∏–π –ª–∏–≤–µ–Ω—å",
    "Moderate or heavy rain shower": "–£–º–µ—Ä–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å",
    "Light snow showers": "–õ—ë–≥–∫–∏–µ —Å–Ω–µ–∂–Ω—ã–µ –æ—Å–∞–¥–∫–∏",
    "Moderate or heavy snow showers": "–£–º–µ—Ä–µ–Ω–Ω—ã–µ –∏–ª–∏ —Å–∏–ª—å–Ω—ã–µ —Å–Ω–µ–∂–Ω—ã–µ –æ—Å–∞–¥–∫–∏",
    "Ice pellets": "–õ–µ–¥—è–Ω—ã–µ –≥—Ä–∞–Ω—É–ª—ã",
    "Rain": "–î–æ–∂–¥—å",
    "Snow": "–°–Ω–µ–≥",
    "Sleet": "–î–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º",
    "Patchy rain nearby": "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏"
}

# --- –°–¢–ê–†–¢ ---
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# --- –ü–û–ì–û–î–ê ---
@dp.message(lambda message: message.text == "üå¶ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã")
async def pogoda(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞", reply_markup=main_menu())
    await state.set_state(WeatherState.waiting_for_city)

async def get_weather(city):
    url = f"https://api.weatherapi.com/v1/forecast.json?key={WEATHER_TOKEN}&q={city}&days=3&aqi=yes"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    city_name = data["location"]["name"]
                    temp = data["current"]["temp_c"]
                    condition = data["current"]["condition"]["text"]
                    wind = data["current"]["wind_kph"]
                    humidity = data["current"]["humidity"]
                    condition_ru = WEATHER_CONDITIONS.get(condition, condition)
                    current_weather = (f"–ü–æ–≥–æ–¥–∞ –≤ {city_name} —Å–µ–π—á–∞—Å:\n"
                                       f"\n"
                                       f"üå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - {temp}¬∞C\n"
                                       f"\n"
                                       f"üîÖ–°–æ—Å—Ç–æ—è–Ω–∏–µ - {condition_ru}\n"
                                       f"\n"
                                       f"ü™Å–í–µ—Ç–µ—Ä - {wind} –∫–º/—á\n"
                                       f"\n"
                                       f"üåßÔ∏è–í–ª–∞–∂–Ω–æ—Å—Ç—å - {humidity}%")

                    forecast_days = data["forecast"]["forecastday"]
                    forecast_text = "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –¥–Ω–∏:\n"
                    for day in forecast_days[1:]:
                        date = day["date"]
                        max_temp = day["day"]["maxtemp_c"]
                        min_temp = day["day"]["mintemp_c"]
                        condition = day["day"]["condition"]["text"]
                        condition_ru = WEATHER_CONDITIONS.get(condition, condition)
                        forecast_text += (f"üóìÔ∏è{date}:\n"
                                         f"üå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ -> {min_temp}¬∞C - {max_temp}¬∞C\n"
                                         f"üîÖ–°–æ—Å—Ç–æ—è–Ω–∏–µ -> {condition_ru}\n\n")

                    return current_weather, forecast_text
                else:
                    error_msg = f"–û—à–∏–±–∫–∞ {response.status}: "
                    if response.status == 400:
                        error_msg += "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
                    elif response.status == 401:
                        error_msg += "–ü—Ä–æ–±–ª–µ–º–∞ —Å API-–∫–ª—é—á–æ–º."
                    return error_msg, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã: {e}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", None

@dp.message(WeatherState.waiting_for_city)
async def process_city(message: types.Message, state: FSMContext):
    city = message.text.strip()
    if not city:
        await message.answer("–í—ã –Ω–µ –≤–≤–µ–ª–∏ –≥–æ—Ä–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
        return
    if not all(c.isalpha() or c in " -‚Äî" for c in city):
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –¥–µ—Ñ–∏—Å—ã.")
        return

    current_weather, forecast_text = await get_weather(city)
    await message.answer(current_weather, reply_markup=main_menu())
    if forecast_text:
        await message.answer(forecast_text, reply_markup=main_menu())
    await state.clear()

# --- –ü–õ–ê–ù–´ ---
@dp.message(lambda message: message.text == "üìÖ –ü–ª–∞–Ω—ã")
async def plan(message: types.Message, state: FSMContext):
    plan_menu = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω")],
            [KeyboardButton(text="‚úèÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω")],
            [KeyboardButton(text="üóëÔ∏è–£–¥–∞–ª–∏—Ç—å –ø–ª–∞–Ω")],
            [KeyboardButton(text="üìã–°–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤")],
            [KeyboardButton(text="üîô–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–ª–∞–Ω–∞–º–∏:", reply_markup=plan_menu)

@dp.message(lambda message: message.text == "üîô–ù–∞–∑–∞–¥")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
    await state.clear()

@dp.message(lambda message: message.text == "‚ûï–î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω")
async def add_plan(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞:", reply_markup=main_menu())
    await state.set_state(PlanState.waiting_for_plan)

@dp.message(PlanState.waiting_for_plan)
async def process_plan(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    plan_text = message.text.strip()
    if not plan_text:
        await message.answer("–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    save_plan(user_id, plan_text)
    await message.answer(f"–í–∞—à –ø–ª–∞–Ω '{plan_text}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=main_menu())
    await state.clear()

@dp.message(lambda message: message.text == "‚úèÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω")
async def edit_plan(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–ª–∞–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=main_menu())
    await state.set_state(PlanState.waiting_for_plan_edit)

@dp.message(PlanState.waiting_for_plan_edit)
async def process_plan_edit(message: types.Message, state: FSMContext):
    plan_id = message.text.strip()
    if not plan_id.isdigit():
        await message.answer("ID –ø–ª–∞–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu())
        return
    plan_id = int(plan_id)

    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS plans (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                plan TEXT NOT NULL
            )
        ''')
        cursor.execute("SELECT id, plan FROM plans WHERE id = ? AND user_id = ?", (plan_id, message.from_user.id))
        plan = cursor.fetchone()

    if not plan:
        await message.answer(f"–ü–ª–∞–Ω —Å ID {plan_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                             reply_markup=main_menu())
        return

    await message.answer(f"–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω: {plan[1]}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–ª–∞–Ω–∞:", reply_markup=main_menu())
    await state.set_state(PlanState.waiting_for_new_plan)
    await state.update_data(plan_id=plan_id)

@dp.message(PlanState.waiting_for_new_plan)
async def process_new_plan(message: types.Message, state: FSMContext):
    new_plan_text = message.text.strip()
    if not new_plan_text:
        await message.answer("–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu())
        return

    data = await state.get_data()
    plan_id = data.get("plan_id")

    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS plans (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                plan TEXT NOT NULL
            )
        ''')
        cursor.execute("UPDATE plans SET plan = ? WHERE id = ? AND user_id = ?",
                       (new_plan_text, plan_id, message.from_user.id))
        conn.commit()

    await message.answer(f"–ü–ª–∞–Ω —Å ID {plan_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞: '{new_plan_text}'.", reply_markup=main_menu())
    await state.clear()

@dp.message(lambda message: message.text == "üóëÔ∏è–£–¥–∞–ª–∏—Ç—å –ø–ª–∞–Ω")
async def delete_plan(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–ª–∞–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=main_menu())
    await state.set_state(PlanState.waiting_for_plan_delete)

@dp.message(PlanState.waiting_for_plan_delete)
async def process_plan_delete(message: types.Message, state: FSMContext):
    plan_id = message.text.strip()
    if not plan_id.isdigit():
        await message.answer("ID –ø–ª–∞–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu())
        return
    plan_id = int(plan_id)

    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS plans (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                plan TEXT NOT NULL
            )
        ''')
        cursor.execute("DELETE FROM plans WHERE id = ? AND user_id = ?", (plan_id, message.from_user.id))
        affected_rows = cursor.rowcount
        conn.commit()

    if affected_rows > 0:
        await message.answer(f"–ü–ª–∞–Ω —Å ID {plan_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", reply_markup=main_menu())
    else:
        await message.answer(f"–ü–ª–∞–Ω —Å ID {plan_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu())
    await state.clear()

@dp.message(lambda message: message.text == "üìã–°–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤")
async def list_plans(message: types.Message, state: FSMContext):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS plans (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                plan TEXT NOT NULL
            )
        ''')
        cursor.execute("SELECT id, plan FROM plans WHERE user_id = ?", (message.from_user.id,))
        plans = cursor.fetchall()

    if not plans:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞–Ω–æ–≤.", reply_markup=main_menu())
    else:
        response = "–í–∞—à–∏ –ø–ª–∞–Ω—ã:\n"
        for plan in plans:
            plan_items = plan[1].split(", ")
            formatted_plan = "\n    ".join(plan_items)
            response += f"ID: {plan[0]}\n    {formatted_plan}\n\n"
        await message.answer(response, reply_markup=main_menu())

# --- GITHUB –ö–û–ú–ú–ò–¢–´ ---
@dp.message(lambda message: message.text == "üêô GitHub –ö–æ–º–º–∏—Ç—ã")
async def github_commits(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, torvalds):")
    await state.set_state(GitHubState.waiting_for_owner)

@dp.message(GitHubState.waiting_for_owner)
async def process_owner(message: types.Message, state: FSMContext):
    await state.update_data(owner=message.text.strip())
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, linux):")
    await state.set_state(GitHubState.waiting_for_repo)

@dp.message(GitHubState.waiting_for_repo)
async def process_repo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    owner = data.get("owner")
    repo = message.text.strip()
    url = f"https://api.github.com/repos/{owner}/{repo}/commits"
    headers = {"Authorization": f"token {GITHUB_TOKEN}"}
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            commits = response.json()
            if commits:
                commit_messages = "\n".join(
                    [f"üë§ {commit['commit']['author']['name']}: {commit['commit']['message']}" for commit in commits[:5]]
                )
                await message.answer(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ {owner}/{repo}:\n{commit_messages}")
            else:
                await message.answer("–í —ç—Ç–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤.")
        else:
            await message.answer(f"–û—à–∏–±–∫–∞: {response.status_code}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    await state.clear()


# --- –¢–†–ï–í–û–ì–ê ---
@dp.message(lambda message: message.text == "üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–µ–≤–æ–≥–∞—Ö")
async def select_region(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT region_id FROM users WHERE user_id = ?", (user_id,))
    region = cursor.fetchone()

    # –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–≤–æ–≥–∏
    if region:
        region_id = region[0]
        alert_menu = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
                [KeyboardButton(text="üîî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å")],
                [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏–æ–Ω")],
            ],
            resize_keyboard=True
        )
        await message.answer(f"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–µ–≤–æ–≥–∞—Ö –≤ —Ä–µ–≥–∏–æ–Ω–µ: {region_id}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=alert_menu)
    else:
        await message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–≥–∏–æ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω.", reply_markup=main_menu())
    
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=header) as response:
                    if response.status == 200:
                        data = await response.json()

                        with open("data.json", "w", encoding="utf-8") as file:
                            json.dump(data, file, indent=4, ensure_ascii=False)

                        # –û–±—Ö–æ–¥–∏–º –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã
                        if 'states' in data:
                            regions_text = "\n\n".join(f"<code>{obl['regionName']}</code>" for obl in data['states'])
                            await message.answer(regions_text, parse_mode="HTML", reply_markup=main_menu())
                            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", reply_markup=main_menu())
                        else:
                            await message.answer("–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
                    else:
                        await message.answer(f"–û—à–∏–±–∫–∞ API: {response.status}")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        await state.set_state(RegionState.waiting_for_obl)

@dp.message(RegionState.waiting_for_obl)
async def process_obl_input(message: types.Message, state: FSMContext):
    obl = message.text.strip()

    await state.update_data(obl=obl)

    with open('data.json', 'r', encoding='utf-8') as file:
        data = json.load(file)

    try:
        if 'states' in data:
            for oblast in data['states']:
                if oblast['regionName'] == obl:
                    if 'regionChildIds' in oblast and isinstance(oblast['regionChildIds'], list):
                        if not oblast['regionChildIds']:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ regionChildIds –ø—É—Å—Ç
                            user_id = message.from_user.id
                            region_name = obl
                            reg_id = oblast['regionId']
                            conn = get_db_connection()
                            cursor = conn.cursor()
                            cursor.execute("INSERT OR REPLACE INTO users (user_id, region_id, reg_id) VALUES (?, ?, ?)", (user_id, region_name, reg_id))
                            conn.commit()
                            conn.close()
                            await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–≥–∏–æ–Ω {obl}. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=main_menu())
                            return
                        # –ï—Å–ª–∏ regionChildIds –Ω–µ –ø—É—Å—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–ª—å—à–µ
                        regions_text = "\n\n".join(f"<code>{region['regionName']}</code>" for region in oblast['regionChildIds'] if isinstance(region, dict))
                        await message.answer(regions_text, parse_mode="HTML", reply_markup=main_menu())
                        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", reply_markup=main_menu())
                        break
        else:
            await message.answer("–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    await state.set_state(RegionState.waiting_for_regi)


@dp.message(RegionState.waiting_for_regi)
async def process_regi_input(message: types.Message, state: FSMContext):
    rajon = message.text.strip()

    data_state = await state.get_data()
    obl = data_state.get('obl')

    await state.update_data(obl=obl, rajon=rajon)

    with open('data.json', 'r', encoding='utf-8') as file:
        data = json.load(file)

    try:
        if 'states' in data:
            for oblast in data['states']:
                if oblast['regionName'] == obl:
                    if 'regionChildIds' in oblast and isinstance(oblast['regionChildIds'], list):
                        for sub in oblast['regionChildIds']:
                            if sub['regionName'] == rajon:
                                if 'regionChildIds' in sub and isinstance(sub['regionChildIds'], list):
                                    if not sub['regionChildIds']:
                                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ regionChildIds –ø—É—Å—Ç
                                        user_id = message.from_user.id
                                        region_name = rajon
                                        reg_id = sub['regionId']
                                        conn = get_db_connection()
                                        cursor = conn.cursor()
                                        cursor.execute("INSERT OR REPLACE INTO users (user_id, region_id, reg_id) VALUES (?, ?, ?)", (user_id, region_name, reg_id))
                                        conn.commit()
                                        conn.close()
                                        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–≥–∏–æ–Ω {rajon}. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=main_menu())
                                        return
                                    regions_text = "\n\n".join(f"<code>{city['regionName']}</code>" for city in sub['regionChildIds'] if isinstance(city, dict))
                                    await message.answer(regions_text, parse_mode="HTML", reply_markup=main_menu())
                                    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–æ—Ä–æ–¥ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", reply_markup=main_menu())
                        break
        else:
            await message.answer("–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    await state.set_state(RegionState.waiting_for_city)


@dp.message(RegionState.waiting_for_city)
async def process_city_input(message: types.Message, state: FSMContext):
    citys = message.text.strip()
    data_state = await state.get_data()
    obl = data_state.get('obl')
    rajon = data_state.get('rajon')

    await state.update_data(citys=citys)

    with open('data.json', 'r', encoding='utf-8') as file:
        data = json.load(file)
    try:
        if 'states' in data:
            for oblast in data['states']:
                if oblast['regionName'] == obl:
                    if 'regionChildIds' in oblast and isinstance(oblast['regionChildIds'], list):
                        for sub in oblast['regionChildIds']:
                            if sub['regionName'] == rajon:
                                if 'regionChildIds' in sub and isinstance(sub['regionChildIds'], list):
                                    for city in sub['regionChildIds']:
                                        if city['regionName'] == citys:
                                            if 'regionChildIds' not in city or not city['regionChildIds']:
                                                user_id = message.from_user.id
                                                region_name = citys
                                                reg_id = city['regionId']
                                                conn = get_db_connection()
                                                cursor = conn.cursor()
                                                cursor.execute("INSERT OR REPLACE INTO users (user_id, region_id, reg_id) VALUES (?, ?, ?)", (user_id, region_name, reg_id))
                                                conn.commit()
                                                conn.close()
                                                await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥ {citys}. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=main_menu())
                                                await state.clear()
                                                return
                                            await message.answer(f"<code>{city['regionName']}</code>")
                                            break
                                else:
                                    # –ï—Å–ª–∏ —É —Ä–∞–π–æ–Ω–∞ –Ω–µ—Ç –¥–æ—á–µ—Ä–Ω–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–π–æ–Ω –∫–∞–∫ –∫–æ–Ω–µ—á–Ω—ã–π –≤—ã–±–æ—Ä
                                    user_id = message.from_user.id
                                    region_name = rajon
                                    reg_id = sub['regionId']
                                    conn = get_db_connection()
                                    cursor = conn.cursor()
                                    cursor.execute("INSERT OR REPLACE INTO users (user_id, region_id, reg_id) VALUES (?, ?, ?)", (user_id, region_name, reg_id))
                                    conn.commit()
                                    conn.close()
                                    await message.answer(f"–£ —Ä–µ–≥–∏–æ–Ω–∞ {rajon} –Ω–µ—Ç –≥–æ—Ä–æ–¥–æ–≤. –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–≥–∏–æ–Ω {rajon}. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=main_menu())
                                    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                                    return
                    break
        else:
            await message.answer("–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

@dp.message(lambda message: message.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏–æ–Ω")
async def change_region(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET region_id = NULL, reg_id = NULL WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

    await state.clear()
    await message.answer("–í—ã —Å–±—Ä–æ—Å–∏–ª–∏ —Ä–µ–≥–∏–æ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω.", reply_markup=main_menu())
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=header) as response:
                if response.status == 200:
                    data = await response.json()

                    with open("data.json", "w", encoding="utf-8") as file:
                        json.dump(data, file, indent=4, ensure_ascii=False)

                    # –û–±—Ö–æ–¥–∏–º –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã
                    if 'states' in data:
                        regions_text = "\n\n".join(f"<code>{obl['regionName']}</code>" for obl in data['states'])
                        await message.answer(regions_text, parse_mode="HTML", reply_markup=main_menu())
                        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", reply_markup=main_menu())
                    else:
                        await message.answer("–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
                else:
                    await message.answer(f"–û—à–∏–±–∫–∞ API: {response.status}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ–±–ª–∞—Å—Ç–∏
    await state.set_state(RegionState.waiting_for_obl)


# --- –ö–ù–û–ü–ö–ê –ü–†–û–í–ï–†–ò–¢–¨ –°–ï–ô–ß–ê–° ---"
@dp.message(lambda message: message.text == "üîî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å")
async def check_alert_now(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT reg_id FROM users WHERE user_id = ?", (user_id,))
    reg_id = cursor.fetchone()

    if reg_id:
        reg_id = reg_id[0]

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url_alert, headers=header) as response:
                if response.status == 200:
                    data = await response.json()

                    with open("data_alert.json", "w", encoding="utf-8") as file:
                        json.dump(data, file, indent=4, ensure_ascii=False)

                    # –û–±—Ö–æ–¥–∏–º –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã
                    for region in data:
                        if region["regionId"] == str(reg_id):
                            if region["activeAlerts"]:
                                for alert in region["activeAlerts"]:
                                    await message.answer(f"{alert['type']}")
                            else:
                                await message.answer("–ù–µ—Ç —Ç—Ä–µ–≤–æ–≥–∏")
                            return

                    await message.answer("–ù–µ—Ç —Ç—Ä–µ–≤–æ–≥–∏")
                else:
                    await message.answer(f"–û—à–∏–±–∫–∞ API: {response.status}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

# --- –ö–ù–û–ü–ö–ê –ù–ê–ó–ê–î ---"
@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
async def main():
    create_db()
    greate_db_user()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())